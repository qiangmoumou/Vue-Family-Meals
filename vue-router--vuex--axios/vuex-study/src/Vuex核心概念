vuex有几个比较核心的概念:

  State : 状态 类似于 data
    State单一状态树 -> 统一管理,易维护  

  Getters : 类似于 计算属性
    把State的某个数据经过某种变化再给其他组件使用的话,就必须在这里先操作好再进行获取

  Mutations : 方法,只能通过这个方法去改状态
    Mutation 主要包括两部分:
      字符串的事件类型(type)
      一个回调函数(handler), 该回调函数的第一个参数就是 state

    Mutation提交风格
      commit进行提交是一种中普通的方式
      Vuex还提供了另外一种风格，它是一个包含 type 属性的对象

    Mutations 响应规则
      Vuex的store中的state是响应式的，当store中的数据发生改变时，Vue组件会自动更新  
        这就要求我们必须遵守一些 Vuex 对应的规则：
          提前在 store 中初始化好所需的属性, 就会自动的添加到响应式系统中，响应式系统会监听属性的变化，当属性发生变化时，会通知所有界面中用到该属性的地方，让界面发生刷新
          当给 state 中的对象添加新属性时，使用下面的方式
            方式一：使用 Vue.set(obj, 'newProp', 123)
            方式二：用新对象给旧对象重新赋值

  Actions  : 做一些异步操作
    通过 commit 调用 mutations 里面的方法
    因为 Actions 操作的都是异步, 所以 在外部调用 Actions 里面的方法的时候, 可以直接返回一个 Promise , 在外部就可以直接操作.then()
    $store.dispatch('Actions里面的方法')

  Module : 划分模块
    当应用变得非常复杂时,store 对象就有可能变得相当臃肿,
    为了解决这个问题,Vuex允许我们将 store 分割成模块,而每个模块拥有自己的 state/ mutations/ actions/ getters 等
    


项目解构:

  index-copy.js   是抽出来的
  对应的导入文件有   mutations.js     actions.js      getters.js      modules/moduleA.js


